== General ==

See below for build instructions for your platform.

The program is known to work with Qt 4.6, 4.7 and 4.8 and not to compile with Qt 4.4 or earlier.
Information about other versions is not available, feel free to give feedback about them.

The .pro file does not include the translations yet, so qmake / qt creator is not fully supported.


== Clipper Library ==

The program uses parts of the clipper code library from 
http://www.angusj.com/delphi/clipper.php which is released under the terms of
the Boost Software License, Version 1.0.

The required files are downloaded to 3rd-party/clipper if missing during build configuration. 
To use a particular revision of the library, remove the 3rd-party/clipper 
directory and adjust the CLIPPER_REVISION variable in 3rd-party/clipper.cmake 
before next build.

If you use qmake / qt creator (instead of cmake), or cmake with Windows and
get an error about clipper.cpp/hpp not being found in the CMake configure step,
then you need to download Clipper manually.

In this case, you have to download the required files from:
http://polyclipping.svn.sourceforge.net/viewvc/polyclipping/trunk
Place them in the 3rd-party directory so you get:
3rd-party/clipper/README
3rd-party/clipper/License.txt
3rd-party/clipper/cpp/clipper.cpp
3rd-party/clipper/cpp/clipper.hpp


== PROJ.4 Cartographic Projections Library ==

The program uses the PROJ.4 Cartographic Projections Library. The program is
known to work with release 4.8.0. See the platform specific notes.


== Compiling on Windows ==

* Requirements:
- A C++ compiler (preferably MinGW, Visual C++ may also work).
- CMake
- Qt
- MSYS 1.0 (for automatic PROJ.4 build)

* PROJ.4 library
If you have MinGW/MSYS installed in C:/MinGW/msys/1.0, the PROJ.4 library will
be automatically downloaded and built during OpenOrienteering build. If you
have MSYS in another path or if you want change the PROJ.4 version, you need to
modify 3rd-party/proj.cmake.

* Qt
The easiest way to get Qt is to intall the Qt SDK. Make sure to select the Qt Assistant for installation,
as this program is used to display the help files.
If you do not have a C++ compiler yet, you can also install MinGW with the QtSDK installer. Note that you
may have to add the mingw / mingw32 bin directories to your PATH environment variable manually if you choose to do this.
If you get an error saying that qcollectiongenerator cannot be found later in the build process, you also have to add
the directory containing this program to the PATH.

* Building OpenOrienteering Mapper:
When all requirements are installed, run cmake and point it to the directory in which
CMakeLists.txt (and the file you are reading now) are in.

Then click "Configure" (if you use the CMake GUI). If it aborts, saying that QMake cannot be found,
enter its path in the red line for the "QT_QMAKE_EXECUTABLE" key,
for example "C:/QtSDK/Desktop/Qt/4.8.0/mingw/bin/qmake.exe". Click "Configure" again and it should run through.
If "Generate" is not enabled yet, click "Configure" a third time and then finally "Generate".

Now the build files should be generated in the directory you specified earlier. If you use MinGW,
execute "mingw32-make" from a command prompt in this directory now to build the project.

If you use Visual C++ 2010 instead, a *.sln file is generated in the build directory which should be opened as the next step.
Five projects should be visible in the Solution Explorer which is by default on the left side. Right click the
"Mapper" project and choose "Set as StartUp project". Right click it again and choose "Properties".
Change "Configuration" to "All configurations" on the top left.
In Debugging, change "Working directory" to the bin subdirectory: "$(ProjectDir)..\bin" (without the ").
If you want to run the Debug version, set the configuration to Debug, go to C/C++ -> Code Generation and
set "Runtime Library" to "Multi-threaded Debug DLL". If you forget to do that, everything will seem to run well, but you will
encounter strange crashes for example on QList destructors. You may also want to disable optimizations for the debug version.
Please also note that the OpenOrienteering developers usually work with gcc, so it is likely that the
current version from git does not compile with Visual C++ without adjustments.

* Building binary ZIP packages with MinGW

Start the build process from a fresh build directory. To prepare a release 
package call 
  cmake -DCMAKE_BUILD_TYPE=Release -G "MinGW Makefiles" ..
  mingw32-make package



== Compiling on Linux ==

* Requirements:
- A C++ compiler (g++)
- CMake
- Qt
- PROJ.4 library

* PROJ.4 library
Make sure that the PROJ.4 library is installed. For a Ubuntu or
Debian system, install libproj0 and libproj-dev.

* Building OpenOrienteering Mapper:
Run the following in the project's root directory:
mkdir build     ("build" is just an example.)
cd build
cmake ../
make -jX        (where X is the number of threads for building)

If you get an error saying that qcollectiongenerator cannot be found, add
the directory containing this program to the search path for executables.

* Running:
cd ../bin       (if still in the build directory)
./Mapper -graphicssystem raster

The option "-graphicssystem raster" is a Qt option which usually leads to better performance on Linux,
in case it is not the default yet anyway (like on Windows). In addition, using the native graphics system
can lead to artifacts.

* Building binary DEB packages:
To create the DEB package for your particular distribution, make sure that 
fakeroot is installed. Start the build process from a fresh build directory.
Call:
  cmake -DCMAKE_BUILD_TYPE=Release ..
  make package

There is a bug in Ubuntu 12.04 (precise) cmake package which might result in 
DEB packages which fail to install with the message 'corrupted filesystem 
tarfile'. You can repair the DEB package by calling:
  make package_repair

You may list the package contents with:
dpkg --contents PACKAGENAME.deb

You may install the package with:
sudo dpkg -i PACKAGENAME.deb

You may later remove the package with:
sudo dpkg -r openorienteering-mapper
