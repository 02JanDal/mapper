== General ==

See below for build instructions for your platform.
A general warning: do not attempt to use the .pro project directly for compiling because
this leads to a conflict with a different naming scheme for Qt's moc files than when using cmake.
Currently, only the cmake toolchain is supported and the .pro file is only useful if you want to use the QtCreator IDE for coding.

The program is known to work with Qt 4.6, 4.7 and 4.8 and not to compile with Qt 4.4 or earlier.
Information about other versions is not available, feel free to give feedback about them.


== Clipper Library ==

The program uses parts of the clipper code library from 
http://www.angusj.com/delphi/clipper.php which is released under the terms of
the Boost Software License, Version 1.0. The required files are downloaded to 
3rd-party/clipper if missing during build configuration. 

To use a particular revision of the library, remove the 3rd-party/clipper 
directory and adjust the CLIPPER_REVISION variable in 3rd-party/clipper.cmake 
before next build.


== Compiling on Windows ==

Requirements:
- A C++ compiler (preferably MinGW, Visual C++ may also work).
- CMake
- Qt

The easiest way to get Qt is to intall the Qt SDK.
If you do not have a C++ compiler yet, you can also install MinGW with the QtSDK installer. Note that you
may have to add the mingw / mingw32 bin directories to your PATH environment variable manually if you choose to do this.

When all requirements are installed, run cmake and point it to the directory in which
CMakeLists.txt (and the file you are reading now) are in.
As build directory, you must use a new subdirectory in this folder named "build".

Then click "Configure" (if you use the CMake GUI). For me, it aborted saying that QMake cannot be found.
In this case, enter its path in the red line for the "QT_QMAKE_EXECUTABLE" key,
for example "C:/QtSDK/Desktop/Qt/4.8.0/mingw/bin/qmake.exe". Click "Configure" again and it should run through.
Because "Generate" was not enabled yet, I had to click "Configure" a third time and then finally "Generate".

This generates the build files in the directory you specified earlier. If you use MinGW, you should be able to
run "mingw32-make" in this directory now to build the project.

If you use Visual C++ 2010 instead, a *.sln file is generated in the build directory which should be opened as the next step.
Five projects should be visible in the Solution Explorer which is by default on the left side. Right click the
"Mapper" project and choose "Set as StartUp project". Right click it again and choose "Properties".
Change "Configuration" to "All configurations" on the top left.
In Debugging, change "Working directory" to the bin subdirectory: "$(ProjectDir)..\bin" (without the ").
If you want to run the Debug version, set the configuration to Debug, go to C/C++ -> Code Generation and
set "Runtime Library" to "Multi-threaded Debug DLL". If you forget to do that, everything will seem to run well, but you will
encounter strange crashes for example on QList destructors. You may also want to disable optimizations for the debug version.
Please also note that
1. There seemed to be a (compiler?) bug with the 'connect' and 'cut hole' tools
   caused by compiling with Visual C++ 2010 in Release mode.
2. The OpenOrienteering developers usually work with gcc, so it is likely that the
   current git version does not compile with Visual C++ without adjustments.


== Compiling on Linux ==

* Requirements:
- A C++ compiler (g++)
- CMake
- Qt

* Building OpenOrienteering Mapper:
Run the following in the project's root directory:
mkdir build     (the build directory must be named "build"!)
cd build
cmake ../
make -jX        (where X is the number of threads for building)

* Running:
cd ../bin       (if still in the build directory)
./Mapper -graphicssystem raster

The option "-graphicssystem raster" is a Qt option which usually leads to better performance on Linux,
in case it is not the default yet anyway (like on Windows).

* Package management:

If you want to create a release package, enable "set(CMAKE_BUILD_TYPE Release)" in the CMakeList.txt. 
Then start the build process from a fresh build directory.
To create the .deb package for your particular distribution, after building call: 
fakeroot make package

You may list the package contents with:
dpkg --contents PACKAGENAME.deb

You may install the package with:
sudo dpkg -i PACKAGENAME.deb

You may later remove the package with:
sudo dpkg -r openorienteering-mapper
