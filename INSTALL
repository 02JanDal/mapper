== General ==

See below for build instructions for your platform.

The supported build process requires CMake 2.8. CMake is available from
http://www.cmake.org/. The recommended version is 2.8.9 or newer.

Qmake / Qt Creator based builds are not supported at the moment.


== Qt Library ==

This program uses the Qt library from http://qt-project.org.
The program is known to work with Qt 4.8 and 5.0 and not to compile with 
Qt 4.4 or earlier. Qt 5.0.1 is the recommended version. By default build
settings, Qt 5.0.1 will be downloaded and built as part of the build process. 


== Clipper Library ==

The program uses parts of the clipper code library from 
http://www.angusj.com/delphi/clipper.php /
http://polyclipping.svn.sourceforge.net/viewvc/polyclipping/trunk
which is released under the terms of the Boost Software License, Version 1.0.
The program is known to work with release 4.8.4 through 5.0.3. By default build
settings, clipper 5.0.3 will be downloaded and built as part of the build
process. 


== PROJ.4 Cartographic Projections Library ==

The program uses the PROJ.4 Cartographic Projections Library. The program is
known to work with the releases 4.7.0 (as contained in Ubuntu 10.04 and 12.04)
and 4.8.0. By default Windows and Mac OS X build settings, proj 4.8.0 will be
downloaded and built as part of the build process. On Linux, default settings
will use the installed proj library.


== Compiling on Windows ==

*These instructions for native builds are outdated and may no longer work.*
See below cross-compiling instructions.

* Requirements:
- CMake
- Qt
- A C++ compiler (preferably MinGW, Visual C++ may also work).
- MSYS 1.0 (for automatic PROJ.4 build)

* CMake 
Install a supported version of CMake from http://www.cmake.org/.

* MSYS
MSYS is needed to build the PROJ.4 library. MSYS is available from
http://www.mingw.org/wiki/MSYS. Please read and follow the installation
instruction from this website. Recommended installation location is C:\MinGW.
You don't need to install MinGW in this step if you install the Qt SDK.

* PROJ.4 library
In cmake-gui (see below), set "Mapper_BUILD_PROJ" to 1 to have the PROJ.4
library be downloaded and built as part of the build process. 

* Qt and MinGW
The easiest way to get Qt is to intall the Qt SDK. Make sure to select the
Qt Assistant for installation. This program is used to display the help files.
The Qt SDK 1.2.1 will allow you to install MinGW gcc compiler.

* Building OpenOrienteering Mapper
You have to run the build from a command prompt which has the mingw bin
directory (if MinGW is used), the Qt bin directory and the CMake director in
its PATH. For the Qt SDK with MinGW, it is sufficient to use a shortcut
provided in the start menu under
 [All] Programs > Qt SDK > Desktop > QT 4.8.1 for Desktop (MinGW).

Create a build directory, change to that directory and call cmake-gui (or
cmake) passing the path to the source code directory as parameter.

In cmake-gui, click "Configure". If it aborts, saying that qmake cannot be
found, enter its path in the red line for the "QT_QMAKE_EXECUTABLE" key, e.g.
"C:/QtSDK/Desktop/Qt/4.8.0/mingw/bin/qmake.exe". Click "Configure" again. It
should run through. If "Generate" is not enabled yet, click "Configure" a third
time and then finally "Generate".

Now the build configuration is generated in the working directory, and the
project is ready for compilation.

If you use MinGW, call "mingw32-make" from the command prompt in this directory
now to build the project. The Mapper.exe will be generated in the build
directory.

(This paragraphed needs to be reviewed:)
If you use Visual C++ 2010, a *.sln file is generated in the build directory
which should be opened as the next step. Five projects should be visible in the
Solution Explorer which is by default on the left side. Right click the "Mapper"
project and choose "Set as StartUp project". Right click it again and choose
"Properties". Change "Configuration" to "All configurations" on the top left.
If you want to run the Debug version,
set the configuration to Debug, go to C/C++ -> Code Generation and set "Runtime
Library" to "Multi-threaded Debug DLL". If you forget to do that, everything
will seem to run well, but you will encounter strange crashes for example on
QList destructors. You may also want to disable optimizations for the debug
version.

Please also note that the OpenOrienteering developers usually work with gcc, so
it is likely that the current version from git does not compile with Visual C++
without adjustments.

* Building binary packages (ZIP, NSIS) with MinGW

Start the build process from a fresh build directory. To prepare a release 
package call 
  cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release -DMapper_BUILD_PROJ=1
  mingw32-make package



== Compiling on Linux ==

* Requirements:
- A C++ compiler (g++)
- CMake
- PROJ.4 library (and development package)

* PROJ.4 library
Make sure that the PROJ.4 library is installed. For a Ubuntu or
Debian system, install libproj0 and libproj-dev.

* Building OpenOrienteering Mapper:
Run the following in the project's root directory:
mkdir build     ("build" is just an example.)
cd build
cmake ../
make -jX        (where X is the number of parallel jobs for building)

* Running:
cd ../bin       (if still in the build directory)
./Mapper

* Building binary DEB packages:
To create the DEB package for your particular distribution, make sure that 
fakeroot is installed. Start the build process from a fresh build directory.
Call:
  cmake -DCMAKE_BUILD_TYPE=Release ..
  make deb

You may list the package contents with:
dpkg --contents PACKAGENAME.deb

You may install the package with:
sudo dpkg -i PACKAGENAME.deb

You may later remove the package with:
sudo dpkg -r openorienteering-mapper



== Cross-Compiling on Linux for Windows in General ==

Some linux distributions may offer cross compiler packages based on MinGW or
MinGW-w64 (for Ubuntu: g++-mingw-w64 et al.).

For MinGW-w64 i686 (32 bit) builds, call

cmake PATH_TO_MAPPER_SRC -DCMAKE_TOOLCHAIN_FILE=(path to source)cmake/toolchain/i686-w64-mingw32

This will add targets and rules to the build system which download,
configure and build the proj and Qt libraries with all neccessary components.
Note that initially there will be no build rules for Mapper and its components
(and no rules for packaging) because the final configuration can only be done
when the required libraries are ready. A single call to

make

will trigger a "superbuild" which will re-run cmake and make when the required
libraries are completed. Note that such a build requires much space (~2 GB,
mostly for Qt) and time. Consider make -j X.
Of course you can call

make package

as soon as another cmake run could find the required libraries. If you have NSIS
installed, it will generate an NSIS installer in addition to the binary ZIP
packages.



== Compiling on Mac OS X ==

You will need to know how to use the command line ("Terminal").
You will need the following software:

* 64-bit Apple Mac OS X 10.6 or later 
* Command Line Tools for Xcode - November 2012 (from Apple, tested with the package for OS X Lion). The January 2013 package is not able to compile to Qt 5.0.0/5.0.1, due to a Qt bug.
* Git from http://git-scm.com/download/mac 
* CMake 2.8.x from http://www.cmake.org/cmake/resources/software.html

Open a Terminal. cd to the directory which will host your working directory.
Checkout the source code with git:

   git clone git://git.code.sf.net/p/oorienteering/code oorienteering-code

Change to the working directory:

   cd oorienteering-code

From the working directory, prepare and configure a build directory:

   mkdir build
   cd build
   cmake ..

From the build directory, you may now do a build by running

   make

The "DragNDrop" CPack generator can be used after make has run once
successfully:

    make package



== Building Distributable Packages ==

Distributing binary code under open source licenses creates certain legal
obligations, such as the distribution of the source code. This is how to do this
correctly for Mapper on Systems without distributor-supplied Qt and PROJ.4, such
as Mac OS X and Windows.

Official release packages need to be build from an official source code archive.
This is to make sure that every user can indeed get all required files for the
release.

Official release packages will include the Qt libraries and the Qt assistant
executable. Official release shall build the Qt components from the Qt source
code in the particular version which we distribute along with our source. The
Mapper_BUILD_QT option to cmake will take care of this.

Similar to Qt, use Mapper_BUILD_PROJ to build the PROJ.4 library from source
(unless building for a Linux distribution),

The build shall start from a fresh build directory. The build shall be in
release mode.

   tar xvzf openorienteering-mapper_X.Y.Z-src.tgz
   cd openorienteering-mapper_X.Y.Z
   mkdir build
   cd build
   cmake .. -DCMAKE_BUILD_TYPE=Release \
            -DMapper_BUILD_QT=1 \
            -DMapper_BUILD_PROJ=1 \
   make
   make package



== Making a source package ==

Start from a clean git working directory. Run

make Mapper_Source

