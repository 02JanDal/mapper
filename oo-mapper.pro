#
#    Copyright 2012, 2013, 2014 Thomas Sch√∂ps, Kai Pastor
#    
#    This file is part of OpenOrienteering.
# 
#    OpenOrienteering is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
# 
#    OpenOrienteering is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
# 
#    You should have received a copy of the GNU General Public License
#    along with OpenOrienteering.  If not, see <http://www.gnu.org/licenses/>.

TEMPLATE = subdirs
CONFIG  -= debug_and_release


# Prerequisites configuration
#
# addPrerequisite(subdir) will add the given subdir as target.
# addPrerequisite(target, path) will add the given target and path.
# Prerequisite directories must create a target.pri file in their output dir.

PREREQUISITES_PRI =

defineTest(addPrerequisite) {
	!contains(SUBDIRS, $$1) {
		target = $$1
		subdir = $$2
		isEmpty(subdir): subdir = $$1
		
		SUBDIRS += $$target
		export(SUBDIRS)
		
		$${target}.subdir = $$subdir
		export($${target}.subdir)
		
		PREREQUISITES_PRI += "include($$OUT_PWD/$${subdir}/$${target}.pri)"
		export(PREREQUISITES_PRI)

		empty =
		write_file($$OUT_PWD/$${subdir}/$${target}.pri, empty, append)

		src.depends += $$target
		export(src.depends)
		
		return(true)
	}
}

addPrerequisite(libocd, src/libocad)
addPrerequisite(clipper, 3rd-party/clipper)
addPrerequisite(qbezier, 3rd-party/qbezier)
!android:addPrerequisite(qtsingleapplication, 3rd-party/qtsingleapplication)
!linux:addPrerequisite(proj, 3rd-party/proj)
android:addPrerequisite(proj, 3rd-party/proj)
addPrerequisite(licensing, docs/licensing)

write_file($$OUT_PWD/prerequisites.pri, PREREQUISITES_PRI)


# CMake toolchain file for prerequisites compilation 

CMAKE_TOOLCHAIN = \
	"$$LITERAL_HASH Generated by $$_PRO_FILE_" \
	"include(CMakeForceCompiler)" \
	"cmake_force_c_compiler($$QMAKE_CC GNU)" \
	"cmake_force_cxx_compiler($$QMAKE_CXX GNU)" \
	"include_directories($$QMAKE_INCDIR)" \
	"link_directories($$QMAKE_LIBDIR)" \
	"set(CMAKE_C_FLAGS   \"$$QMAKE_CFLAGS\")" \
	"set(CMAKE_CXX_FLAGS \"$$QMAKE_CXXFLAGS\")" \
	"set(CMAKE_C_FLAGS_DEBUG   \"$$QMAKE_CFLAGS_DEBUG $$QMAKE_CFLAGS_WARN_ON\")" \
	"set(CMAKE_CXX_FLAGS_DEBUG \"$$QMAKE_CXXFLAGS_DEBUG $$QMAKE_CXXFLAGS_WARN_ON\")" \
	"set(CMAKE_C_FLAGS_RELEASE   \"$$QMAKE_CFLAGS_RELEASE $$QMAKE_CFLAGS_WARN_OFF\")" \
	"set(CMAKE_CXX_FLAGS_RELEASE \"$$QMAKE_CXXFLAGS_RELEASE $$QMAKE_CXXFLAGS_WARN_OFF\")"

CONFIG(debug, debug|release): CMAKE_TOOLCHAIN += \
	"set(CMAKE_BUILD_TYPE Debug)"
else:CONFIG(release): CMAKE_TOOLCHAIN += \
	"set(CMAKE_BUILD_TYPE Release)"

win32:gcc: CMAKE_TOOLCHAIN += \
	"set(CMAKE_SYSTEM_NAME Windows)" \
	"execute_process(COMMAND \"$$QMAKE_CC\" -dumpmachine OUTPUT_VARIABLE GNU_SYSTEM_NAME OUTPUT_STRIP_TRAILING_WHITESPACE)" \
	"string(REGEX REPLACE \"gcc$\" windres CMAKE_RC_COMPILER \"$$QMAKE_CC\")" \
	"set(MINGW 1)"

android: CMAKE_TOOLCHAIN += \
	"set(CMAKE_SYSTEM_NAME Linux)" \
	"set(GNU_SYSTEM_NAME $$NDK_TOOLS_PREFIX)" \
	"set(NDK_TOOLCHAIN_PATH $$NDK_TOOLCHAIN_PATH)"

write_file($$OUT_PWD/toolchain.cmake, CMAKE_TOOLCHAIN)


# Mapper build

SUBDIRS  += src
